import streamlit as st
from helpers import get_response, is_valid_vn_ticker, get_stock_dataframe, show_candlestick_chart

# --- Streamlit UI ---
st.set_page_config(page_title="VN Stock Advisor", layout="centered", initial_sidebar_state="auto")

st.title("üìà VN Stock Advisor", anchor=False)
st.subheader("ü§ñ Ph√¢n t√≠ch c·ªï phi·∫øu Vi·ªát b·∫±ng AI Agent", anchor=False)

# Initialize session state variables if they don't exist
if 'ticker' not in st.session_state:
    st.session_state.ticker = ""
if 'result' not in st.session_state:
    st.session_state.result = None
if 'error' not in st.session_state:
    st.session_state.error = None
if 'analyzing' not in st.session_state: # To manage the spinner and button state
    st.session_state.analyzing = False

# Input form for the stock ticker
with st.form(key="stock_form"):
    ticker_input = st.text_input(
        label="Nh·∫≠p m√£ c·ªï phi·∫øu:",
        value=st.session_state.ticker,
        placeholder="V√≠ d·ª•: FPT, HPG, VCB...",
        help="Nh·∫≠p 3 ho·∫∑c 4 k√Ω t·ª± c·ªßa m√£ c·ªï phi·∫øu (VD: FPT)."
    ).strip().upper() # Sanitize and convert to uppercase
    
    submit_button = st.form_submit_button(
        label="üîç Ph√¢n t√≠ch ngay", 
        use_container_width=True,
        disabled=st.session_state.analyzing # Disable button while analyzing
    )

# This block runs if submit_botton is pressed, update session state then rerun to show spinner
if submit_button:
    st.session_state.ticker = ticker_input
    st.session_state.result = None # Reset previous result
    st.session_state.error = None   # Reset previous error
    
    if not st.session_state.ticker:
        st.session_state.error = "‚ö†Ô∏è Vui l√≤ng nh·∫≠p m√£ c·ªï phi·∫øu."
    elif not is_valid_vn_ticker(st.session_state.ticker):
        st.session_state.error = "‚ö†Ô∏è M√£ c·ªï phi·∫øu kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p m√£ 3-4 k√≠ t·ª± (VD: FPT)."
    else:
        st.session_state.analyzing = True # Start analysis
        # Re-run to show spinner and disable button
        st.rerun() 

# This block runs if analyzing is true (after the rerun from submit)
# Display the chart in Streamlit only if we have a valid ticker
if st.session_state.ticker and not st.session_state.error:
    chart_data = get_stock_dataframe(st.session_state.ticker)
    if chart_data is not None:
        fig = show_candlestick_chart(chart_data, st.session_state.ticker)
        st.plotly_chart(fig, use_container_width=True)

        # Optional: Show the data table
        if st.checkbox("Show raw data"):
            st.dataframe(chart_data)
    else:
        st.error("‚ùå Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu c·ªï phi·∫øu. Vui l√≤ng ki·ªÉm tra m√£ c·ªï phi·∫øu ho·∫∑c th·ª≠ l·∫°i sau.")

if st.session_state.analyzing and not st.session_state.error: # also check no prior validation error
    with st.spinner(f"‚è≥ C√°c AI Agents ƒëang t·ªïng h·ª£p v√† ph√¢n t√≠ch m√£ {st.session_state.ticker}... Th·ªùi gian ch·ªù c√≥ th·ªÉ l√™n t·ªõi 2-3 ph√∫t."):
        response_data = get_response(st.session_state.ticker)

    if response_data and response_data.get("status") == "error":
        st.session_state.error = f"‚ùå {response_data.get('error', 'ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh trong qu√° tr√¨nh ph√¢n t√≠ch.')}"
    elif response_data:
        st.session_state.result = response_data
    else: # Should not happen if get_response always returns a dict
        st.session_state.error = "‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ h·ªá th·ªëng ph√¢n t√≠ch."
    st.session_state.analyzing = False # Analysis finished
    st.rerun() # Rerun to update UI based on new state (result or error)

# Display error message if any, and analysis is not in progress
if st.session_state.error and not st.session_state.analyzing:
    st.error(st.session_state.error)

# Display result if available, and analysis is not in progress
if st.session_state.result and not st.session_state.analyzing:
    result = st.session_state.result
    
    st.markdown("---") # Visual separator
    
    # Using columns for layout
    col1, col2 = st.columns([0.8, 1.2]) # Adjusted column ratio for better balance

    with col1:
        # Display the ticker prominently using st.subheader
        st.subheader(f"M√£: {result.get('stock_ticker', 'N/A')}", anchor=False)
        
        # Display the investment decision using Streamlit's colored message boxes
        decision = result.get('decision', 'N/A')
        if decision and isinstance(decision, str): # Ensure decision is a non-empty string
            decision_lower = decision.lower()
            if "mua" in decision_lower:
                st.success(f"**Khuy·∫øn ngh·ªã: {decision.upper()}** üëç")
            elif "b√°n" in decision_lower: # More flexible check for "B√°n"
                st.error(f"**Khuy·∫øn ngh·ªã: {decision.upper()}** üëé")
            else: # For "Trung l·∫≠p" or other neutral decisions
                st.warning(f"**Khuy·∫øn ngh·ªã: {decision.upper()}** ‚öñÔ∏è")
        else:
            st.info("**Khuy·∫øn ngh·ªã: Kh√¥ng c√≥**")


    with col2:
        # Display company name, industry, and analysis date
        st.markdown(f"**T√™n c√¥ng ty:** {result.get('full_name', 'Kh√¥ng c√≥ th√¥ng tin')}")
        st.caption(f"**Ng√†nh:** {result.get('industry', 'N/A')}")
        st.caption(f"**Ng√†y ph√¢n t√≠ch:** {result.get('today_date', 'N/A')}")
        if "gi·ªØ" in decision_lower:
            st.caption(result.get('buy_price', 'Kh√¥ng c√≥ gi√° mua khuy·∫øn ngh·ªã.'))
            st.caption(result.get('sell_price', 'Kh√¥ng c√≥ gi√° b√°n khuy·∫øn ngh·ªã.'))

    st.markdown("---") # Visual separator
    st.markdown("### üìù Ph√¢n t√≠ch chi ti·∫øt")

    # Using expanders for different analysis sections
    with st.expander("**üåç Ph√¢n t√≠ch th·ªã tr∆∞·ªùng vƒ© m√¥**", expanded=False):
        st.write(result.get('macro_reasoning', 'Kh√¥ng c√≥ d·ªØ li·ªáu ph√¢n t√≠ch th·ªã tr∆∞·ªùng.'))

    with st.expander("**üè¢ Ph√¢n t√≠ch c∆° b·∫£n (Doanh nghi·ªáp)**", expanded=False):
        st.write(result.get('fund_reasoning', 'Kh√¥ng c√≥ d·ªØ li·ªáu ph√¢n t√≠ch c∆° b·∫£n.'))

    with st.expander("**üìä Ph√¢n t√≠ch kƒ© thu·∫≠t**", expanded=False):
        st.write(result.get('tech_reasoning', 'Kh√¥ng c√≥ d·ªØ li·ªáu ph√¢n t√≠ch kƒ© thu·∫≠t.'))

# ---  Disclaimer Section ---
st.markdown("---") # Visual separator
disclaimer_text = """
D·ª± √°n n√†y ƒë∆∞·ª£c ph√°t tri·ªÉn v·ªõi m·ª•c ƒë√≠ch ch√≠nh l√† h·ªçc t·∫≠p v√† nghi√™n c·ª©u v·ªÅ c√°c c√¥ng ngh·ªá Large Language Model (LLM), Prompt Engineering v√† CrewAI framework, c≈©ng nh∆∞ ·ª©ng d·ª•ng ch√∫ng v√†o vi·ªác ph√¢n t√≠ch c·ªï phi·∫øu m·ªôt c√°ch t·ª± ƒë·ªông.

C√°c b√°o c√°o v√† th√¥ng tin ph√¢n t√≠ch ƒë∆∞·ª£c **VN Stock Advisor** t·ªïng h·ª£p t·ª´ nhi·ªÅu ngu·ªìn d·ªØ li·ªáu c√¥ng khai tr√™n Internet v√† ƒë∆∞·ª£c x·ª≠ l√Ω, ph√¢n t√≠ch b·ªüi tr√≠ tu·ªá nh√¢n t·∫°o (AI). Do ƒë√≥, t·∫•t c·∫£ c√°c quan ƒëi·ªÉm, nh·∫≠n ƒë·ªãnh, lu·∫≠n ƒëi·ªÉm, v√† khuy·∫øn ngh·ªã mua/b√°n/n·∫Øm gi·ªØ c·ªï phi·∫øu m√† **VN Stock Advisor** ƒë∆∞a ra ch·ªâ mang t√≠nh ch·∫•t tham kh·∫£o, kh√¥ng c·∫•u th√†nh l·ªùi khuy√™n ƒë·∫ßu t∆∞ ch√≠nh th·ª©c.

Ng∆∞·ªùi d√πng c·∫ßn t·ª± ch·ªãu tr√°ch nhi·ªám cho c√°c quy·∫øt ƒë·ªãnh ƒë·∫ßu t∆∞ c·ªßa m√¨nh. **VN Stock Advisor** v√† ng∆∞·ªùi ph√°t tri·ªÉn kh√¥ng ch·ªãu tr√°ch nhi·ªám ƒë·ªëi v·ªõi b·∫•t k·ª≥ kho·∫£n t·ªïn th·∫•t ho·∫∑c thi·ªát h·∫°i n√†o ph√°t sinh t·ª´ vi·ªác s·ª≠ d·ª•ng c√°c th√¥ng tin v√† b√°o c√°o ph√¢n t√≠ch n√†y. H√£y lu√¥n tham kh·∫£o √Ω ki·∫øn t·ª´ c√°c chuy√™n gia t√†i ch√≠nh c√≥ ch·ª©ng ch·ªâ tr∆∞·ªõc khi ƒë∆∞a ra b·∫•t k·ª≥ quy·∫øt ƒë·ªãnh ƒë·∫ßu t∆∞ n√†o.
"""
# Using st.info to display the disclaimer in a styled box
st.caption(disclaimer_text)

# --- Footer ---
st.markdown("---")  # Visual separator
st.markdown("\n")  # Add some spacing
st.markdown(":copyright: 2025 D∆∞∆°ng Anh Minh. All Rights Reserved.")
st.markdown("Li√™n h·ªá: [My github](https://github.com/abcxyz91/vn_stock_advisor)")